package org.fenci.fencingfplus2.features.module.modules.exploit;

import com.mojang.authlib.GameProfile;
import net.minecraft.client.entity.EntityOtherPlayerMP;
import net.minecraft.client.model.ModelPlayer;
import net.minecraft.init.SoundEvents;
import net.minecraft.network.play.server.SPacketSoundEffect;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.client.event.RenderWorldLastEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import org.fenci.fencingfplus2.events.network.PacketEvent;
import org.fenci.fencingfplus2.features.module.Module;
import org.fenci.fencingfplus2.util.render.PopChamsUtil;
import org.fenci.fencingfplus2.util.render.RenderUtil;
import org.lwjgl.opengl.GL11;

import java.awt.*;

public class ChorusPredict extends Module {
    SPacketSoundEffect soundEffect = null;
    private ModelPlayer playerModel;

    public ChorusPredict() {
        super("ChorusPredict", "See where people are going to chorus to", Category.Exploit);
    }

    @SubscribeEvent
    public void onPacket(PacketEvent.Receive event) {
        if (event.getPacket() instanceof SPacketSoundEffect) {
            if (soundEffect.getSound().equals(SoundEvents.ITEM_CHORUS_FRUIT_TELEPORT)) {
                soundEffect = event.getPacket();
            }
        }
    }

    @SubscribeEvent
    public void onRender(RenderWorldLastEvent event) {
        if (fullNullCheck() && soundEffect != null) {
            BlockPos posToRender = new BlockPos(soundEffect.getX(), soundEffect.getY(), soundEffect.getZ());
            GameProfile profile = new GameProfile(mc.player.getUniqueID(), "");
            EntityOtherPlayerMP player = new EntityOtherPlayerMP(mc.world, profile);
            player.setLocationAndAngles(posToRender.getX(), posToRender.getY(), posToRender.getZ(), mc.player.rotationYaw, mc.player.rotationPitch);
            this.playerModel = new ModelPlayer(0.0f, false);
            this.playerModel.bipedHead.showModel = false;
            this.playerModel.bipedBody.showModel = false;
            this.playerModel.bipedLeftArmwear.showModel = false;
            this.playerModel.bipedLeftLegwear.showModel = false;
            this.playerModel.bipedRightArmwear.showModel = false;
            this.playerModel.bipedRightLegwear.showModel = false;

            GL11.glLineWidth(1.0f);
            Color lineColorS = new Color(184, 15, 10, 75);
            Color fillColorS = new Color(184, 15, 10, 75);
            int lineA = lineColorS.getAlpha();
            int fillA = fillColorS.getAlpha();
            Color lineColor = PopChamsUtil.newAlpha(lineColorS, lineA);
            Color fillColor = PopChamsUtil.newAlpha(fillColorS, fillA);
            if (this.playerModel != null) {
                RenderUtil.TessellatorUtil.prepareGL();
                GL11.glPushAttrib(1048575);
                GL11.glEnable(2881);
                GL11.glEnable(2848);
                Color outlineFinal = new Color(lineColor.getRed(), lineColor.getGreen(), lineColor.getBlue(), 75);
                Color fillFinal = new Color(fillColor.getRed(), fillColor.getGreen(), fillColor.getBlue(), 75);
                PopChamsUtil.glColor(fillFinal);
                GL11.glPolygonMode(1032, 6914);
                PopChamsUtil.renderEntity(player, this.playerModel, mc.player.limbSwing, mc.player.limbSwingAmount, mc.player.ticksExisted, 90, 90, 1.0f);
                PopChamsUtil.glColor(outlineFinal);
                GL11.glPolygonMode(1032, 6913);
                PopChamsUtil.renderEntity(player, this.playerModel, mc.player.limbSwing, mc.player.limbSwingAmount, mc.player.ticksExisted, 90, 90, 1.0f);
                GL11.glPolygonMode(1032, 6914);
                GL11.glPopAttrib();
                RenderUtil.TessellatorUtil.releaseGL();
            }
        }
    }
}
