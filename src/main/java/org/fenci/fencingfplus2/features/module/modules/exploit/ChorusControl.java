package org.fenci.fencingfplus2.features.module.modules.exploit;

import com.mojang.authlib.GameProfile;
import net.minecraft.client.entity.EntityOtherPlayerMP;
import net.minecraft.client.gui.GuiDownloadTerrain;
import net.minecraft.client.model.ModelPlayer;
import net.minecraft.init.Items;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.client.event.RenderWorldLastEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import org.fenci.fencingfplus2.events.network.PacketEvent;
import org.fenci.fencingfplus2.events.player.EatEvent;
import org.fenci.fencingfplus2.features.module.Module;
import org.fenci.fencingfplus2.setting.Setting;
import org.fenci.fencingfplus2.util.player.InventoryUtil;
import org.fenci.fencingfplus2.util.render.PopChamsUtil;
import org.fenci.fencingfplus2.util.render.RenderUtil;
import org.lwjgl.opengl.GL11;

import java.awt.*;

public class ChorusControl extends Module {
    public static final Setting<Render> render = new Setting<>("Render", Render.Player);
    public static final Setting<Boolean> breakFix = new Setting<>("Fix", false);
    private boolean hasEaten = false;
    private SPacketPlayerPosLook packet;
    private ModelPlayer playerModel;

    public ChorusControl() {
        super("ChorusControl", "Allows you to control when your chorus teleports you.", Category.Exploit);
    }

    @Override
    public void onUpdate() {
        if (!InventoryUtil.isInHotbar(Items.CHORUS_FRUIT) || mc.player.inPortal || mc.currentScreen instanceof GuiDownloadTerrain)
            return;
        if (mc.player.isDead || mc.player.getHealth() <= 0.0) {
            hasEaten = false;
            packet = null;
        }

        if (hasEaten && mc.gameSettings.keyBindSneak.isKeyDown()) {
            packet = null;
            hasEaten = false;
        }

        if (packet != null && !hasEaten) {
            mc.player.connection.handlePlayerPosLook(packet);
            packet = null;
            hasEaten = false;
        }
        if (breakFix.getValue() || mc.player.inPortal || mc.currentScreen instanceof GuiDownloadTerrain) {
            this.toggle(false);
        }
    }

    @SubscribeEvent
    public void onPacket(PacketEvent.Receive event) {
        if (!fullNullCheck() || !InventoryUtil.isInHotbar(Items.CHORUS_FRUIT) || mc.player.inPortal || mc.currentScreen instanceof GuiDownloadTerrain)
            return;
        if (event.getPacket() instanceof SPacketPlayerPosLook) {
            packet = event.getPacket();
            event.setCanceled(true);
        }
    }

    @SubscribeEvent
    public void onPacket(PacketEvent.Send event) {
        if (!fullNullCheck() || !InventoryUtil.isInHotbar(Items.CHORUS_FRUIT) || mc.player.inPortal || mc.currentScreen instanceof GuiDownloadTerrain)
            return;
        if (event.getPacket() instanceof CPacketPlayer || event.getPacket() instanceof CPacketConfirmTeleport) {
            event.setCanceled(hasEaten);
        }
    }

    @SubscribeEvent
    public void onRender(RenderWorldLastEvent event) {
        if (!fullNullCheck() || !InventoryUtil.isInHotbar(Items.CHORUS_FRUIT) || mc.player.inPortal || mc.currentScreen instanceof GuiDownloadTerrain)
            return;
        if (packet == null || !fullNullCheck() || !hasEaten) return;
        BlockPos posToRender = new BlockPos(packet.getX(), packet.getY(), packet.getZ());

        if (render.getValue().equals(Render.Block)) {
            RenderUtil.drawBox(RenderUtil.generateBB(posToRender.getX(), posToRender.getY(), posToRender.getZ()), 184 / 255f, 15 / 255f, 10 / 255f, 75 / 255f);
        } else if (render.getValue().equals(Render.Player)) {
            GameProfile profile = new GameProfile(mc.player.getUniqueID(), "");
            EntityOtherPlayerMP player = new EntityOtherPlayerMP(mc.world, profile);
            player.setLocationAndAngles(posToRender.getX(), posToRender.getY(), posToRender.getZ(), mc.player.rotationYaw, mc.player.rotationPitch);
            this.playerModel = new ModelPlayer(0.0f, false);
            this.playerModel.bipedHead.showModel = false;
            this.playerModel.bipedBody.showModel = false;
            this.playerModel.bipedLeftArmwear.showModel = false;
            this.playerModel.bipedLeftLegwear.showModel = false;
            this.playerModel.bipedRightArmwear.showModel = false;
            this.playerModel.bipedRightLegwear.showModel = false;

            GL11.glLineWidth(1.0f);
            Color lineColorS = new Color(184, 15, 10, 75);
            Color fillColorS = new Color(184, 15, 10, 75);
            int lineA = lineColorS.getAlpha();
            int fillA = fillColorS.getAlpha();
            Color lineColor = PopChamsUtil.newAlpha(lineColorS, lineA);
            Color fillColor = PopChamsUtil.newAlpha(fillColorS, fillA);
            if (this.playerModel != null) {
                RenderUtil.TessellatorUtil.prepareGL();
                GL11.glPushAttrib(1048575);
                GL11.glEnable(2881);
                GL11.glEnable(2848);
                Color outlineFinal = new Color(lineColor.getRed(), lineColor.getGreen(), lineColor.getBlue(), 75);
                Color fillFinal = new Color(fillColor.getRed(), fillColor.getGreen(), fillColor.getBlue(), 75);
                PopChamsUtil.glColor(fillFinal);
                GL11.glPolygonMode(1032, 6914);
                PopChamsUtil.renderEntity(player, this.playerModel, mc.player.limbSwing, mc.player.limbSwingAmount, mc.player.ticksExisted, 90, 90, 1.0f);
                PopChamsUtil.glColor(outlineFinal);
                GL11.glPolygonMode(1032, 6913);
                PopChamsUtil.renderEntity(player, this.playerModel, mc.player.limbSwing, mc.player.limbSwingAmount, mc.player.ticksExisted, 90, 90, 1.0f);
                GL11.glPolygonMode(1032, 6914);
                GL11.glPopAttrib();
                RenderUtil.TessellatorUtil.releaseGL();
            }
        }
    }

    @SubscribeEvent
    public void onEat(EatEvent event) {
        if (!fullNullCheck() || !InventoryUtil.isInHotbar(Items.CHORUS_FRUIT) || mc.player.inPortal || mc.currentScreen instanceof GuiDownloadTerrain)
            return;
        if (event.getPlayer().equals(mc.player) && event.getStack().getItem().equals(Items.CHORUS_FRUIT) && fullNullCheck()) {
            hasEaten = true;
        }
    }

    @Override
    public void onDisable() {
        packet = null;
        hasEaten = false;
    }

    public enum Render {
        Player, Block, Off
    }
}
